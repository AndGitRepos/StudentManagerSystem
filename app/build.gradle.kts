/*
* This file was generated by the Gradle 'init' task.
*
* This generated file contains a sample Java application project to get you started.
* For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
*/


plugins {
   // Apply the application plugin to add support for building a CLI application in Java.
   application
   id("com.diffplug.spotless") version "6.23.3"
   id("io.freefair.lombok") version "8.13.1"
   id("org.openjfx.javafxplugin") version "0.0.13"
}


repositories {
   // Use Maven Central for resolving dependencies.
   mavenCentral()
}


dependencies {
   // Explicit FX dependencies
   implementation("org.openjfx:javafx-controls:17.0.2")
   implementation("org.openjfx:javafx-fxml:17.0.2")


   // Use JUnit test framework.
   testImplementation(libs.junit)
   testImplementation("org.mockito:mockito-core:5.8.0")
   testImplementation("org.mockito:mockito-inline:5.2.0")


   // This dependency is used by the application.
   implementation(libs.guava)


   implementation("com.h2database:h2:2.2.224")
}


// Apply a specific Java toolchain to ease working on different environments.
java {
   toolchain {
       languageVersion = JavaLanguageVersion.of(21)
   }
}


application {
   // Define the main class for the application.
   mainClass.set("sms.gradle.App")
}


javafx {
   version = "17.0.2"
   modules("javafx.controls", "javafx.fxml")
}


tasks.named<JavaExec>("run") {
   notCompatibleWithConfigurationCache("JavaFX not compatible with configuration cache")
}


spotless {
   java {
       importOrder()
       removeUnusedImports()
       palantirJavaFormat()
   }
}


tasks.named<JavaCompile>("compileJava").configure {
   tasks.named("spotlessApply").get().mustRunAfter(this)
}


tasks.register<Jar>("fatJar") {
   archiveClassifier.set("all")
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE

   from(sourceSets.main.get().output)
   dependsOn(configurations.runtimeClasspath)

   manifest {
       attributes["Main-Class"] = "sms.gradle.App" // Replace with your actual main class
   }

   from({
       configurations.runtimeClasspath.get().filter { it.exists() }.map { if (it.isDirectory) it else zipTree(it) }
   })

    // Include JavaFX dependencies
    from(project.configurations.getByName("runtimeClasspath")
        .filter { it.name.startsWith("javafx") }
        .map { if (it.isDirectory) it else zipTree(it) }
    ) 


   
}

